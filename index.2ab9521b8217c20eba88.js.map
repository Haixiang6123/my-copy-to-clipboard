{"version":3,"sources":["webpack://ts-static-webapp-template/./src/lib/utils.ts","webpack://ts-static-webapp-template/./src/lib/constants.ts","webpack://ts-static-webapp-template/./src/lib/index.ts","webpack://ts-static-webapp-template/./src/index.ts"],"names":["clipboardToIE11Formatting","text","options","onCopy","format","success","reselectPrevious","selection","document","getSelection","rangeCount","$active","activeElement","ranges","i","push","getRangeAt","tagName","toUpperCase","blur","removeAllRanges","type","forEach","range","addRange","focus","deselectCurrent","createRange","mark","createElement","textContent","style","all","position","top","clip","whiteSpace","userSelect","updateMarkStyles","addEventListener","e","stopPropagation","preventDefault","clipboardData","clearData","setData","IE11Format","window","body","appendChild","selectNodeContents","execCommand","Error","prompt","removeRange","removeChild","$copy","querySelector","$myCopy","onclick","copyText","innerText","myText","data"],"mappings":"mBAAO,ICQMA,EAAwD,CACnE,aAAc,OACd,YAAa,MACb,QAAW,QC0Fb,QArFa,SAACC,EAAcC,QAAA,IAAAA,MAAA,IACnB,IAAAC,EAAkBD,EAAO,OAAjBE,EAAUF,EAAO,OAE5BG,GAAU,EAERC,EFrBuB,WAC7B,IAAMC,EAAYC,SAASC,eAG3B,GAA6B,IAAzBF,EAAUG,WACZ,OAAO,aAOT,IAJA,IAAIC,EAAUH,SAASI,cAGjBC,EAAkB,GACfC,EAAI,EAAGA,EAAIP,EAAUG,WAAYI,IACxCD,EAAOE,KAAKR,EAAUS,WAAWF,IAInC,OAAQH,EAAQM,QAAQC,eACtB,IAAK,QACL,IAAK,WACFP,EAAmDQ,OACpD,MACF,QACER,EAAU,KAMd,OAFAJ,EAAUa,kBAEH,WAEkB,UAAnBb,EAAUc,MACZd,EAAUa,kBAIiB,IAAzBb,EAAUG,YACZG,EAAOS,SAAQ,SAAAC,GACbhB,EAAUiB,SAASD,MAInBZ,GACDA,EAAmDc,SEtB/BC,GAEnBH,EAAQf,SAASmB,cACjBpB,EAAYC,SAASC,eAErBmB,EAAOpB,SAASqB,cAAc,QACpCD,EAAKE,YAAc7B,EAxBI,SAAC2B,GAExBA,EAAKG,MAAMC,IAAM,QAEjBJ,EAAKG,MAAME,SAAW,QACtBL,EAAKG,MAAMG,IAAM,IACjBN,EAAKG,MAAMI,KAAO,mBAElBP,EAAKG,MAAMK,WAAa,MAExBR,EAAKG,MAAMM,WAAa,OAgBxBC,CAAiBV,GAEjBA,EAAKW,iBAAiB,QAAQ,SAACC,GAE7B,GADAA,EAAEC,kBACErC,EAEF,GADAoC,EAAEE,iBACGF,EAAEG,cASLH,EAAEG,cAAcC,YAChBJ,EAAEG,cAAcE,QAAQzC,EAAQH,OAVZ,CAGpB,IAAM6C,EAAa9C,EAA0BI,GAAU,WAEvD2C,OAAOJ,cAAcC,YAErBG,OAAOJ,cAAcE,QAAQC,EAAY7C,GAOzCE,IACFqC,EAAEE,iBACFvC,EAAOqC,EAAEG,mBAKbnC,SAASwC,KAAKC,YAAYrB,GAG1BL,EAAM2B,mBAAmBtB,GACzBrB,EAAUiB,SAASD,GAEnB,IAIE,KAFAlB,EAAUG,SAAS2C,YAAY,SAG7B,MAAM,IAAIC,MAAM,kBAGlB/C,GAAU,EACV,MAAOmC,GACP,IAEEO,OAAOJ,cAAcE,QAAQzC,GAAU,OAAQH,GAE/CE,GAAUA,EAAO4C,OAAOJ,eAExBtC,GAAU,EACV,MAAOmC,GAEPO,OAAOM,OAAO,YAAapD,I,QAGzBM,IACEA,EAAU+C,YACZ/C,EAAU+C,YAAY/B,GAEtBhB,EAAUa,mBAIVQ,GACFpB,SAASwC,KAAKO,YAAY3B,GAE5BtB,IAGF,OAAOD,GChGT,IAAMmD,EAAQhD,SAASiD,cAAiC,SAClDC,EAAUlD,SAASiD,cAAiC,YAE1DD,EAAMG,QAAU,WACd,IAAMC,EAAWpD,SAASiD,cAAoC,SAASI,UAEvE,EAAKD,IAGPF,EAAQC,QAAU,WAChB,IAAMG,EAAStD,SAASiD,cAAoC,YAAYI,UAExE,EAAK,MAAO,CACV1D,OAAQ,SAAC4D,GAAS,OAAAA,EAAKlB,QAAQ,aAAciB,Q","file":"index.2ab9521b8217c20eba88.js","sourcesContent":["export const deselectCurrent = () => {\n  const selection = document.getSelection()\n\n  // 当前没有选中\n  if (selection.rangeCount === 0) {\n    return () => {}\n  }\n\n  let $active = document.activeElement\n\n  // 获取当前选中的 ranges\n  const ranges: Range[] = []\n  for (let i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i))\n  }\n\n  // 如果为输入元素先 blur 再 focus\n  switch ($active.tagName.toUpperCase()) {\n    case 'INPUT':\n    case 'TEXTAREA':\n      ($active as HTMLInputElement | HTMLTextAreaElement).blur()\n      break\n    default:\n      $active = null\n  }\n\n  // deselect\n  selection.removeAllRanges();\n\n  return () => {\n    // 如果是插入符则移除 ranges\n    if (selection.type === 'Caret') {\n      selection.removeAllRanges()\n    }\n\n    // 没有选中，就把之前的 ranges 加回来\n    if (selection.rangeCount === 0) {\n      ranges.forEach(range => {\n        selection.addRange(range)\n      })\n    }\n\n    if ($active) {\n      ($active as HTMLInputElement | HTMLTextAreaElement).focus()\n    }\n  }\n}\n","export type Format = 'text/plain' | 'text/html' | 'default'\nexport type IE11Format = 'Text' | 'Url'\n\nexport interface Options {\n  onCopy?: (copiedText: DataTransfer | null) => unknown\n  format?: Format\n}\n\nexport const clipboardToIE11Formatting: Record<Format, IE11Format> = {\n  \"text/plain\": \"Text\",\n  \"text/html\": \"Url\",\n  \"default\": \"Text\"\n}\n","import {deselectCurrent} from './utils'\nimport {clipboardToIE11Formatting, Options} from './constants'\n\nconst updateMarkStyles = (mark: HTMLSpanElement) => {\n  // 重置用户样式\n  mark.style.all = \"unset\";\n  // 放在 fixed，防止添加元素后触发滚动行为\n  mark.style.position = \"fixed\";\n  mark.style.top = '0';\n  mark.style.clip = \"rect(0, 0, 0, 0)\";\n  // 保留 space 和 line-break 特性\n  mark.style.whiteSpace = \"pre\";\n  // 外部有可能 user-select 为 'none'，因此这里设置为 text\n  mark.style.userSelect = \"text\";\n}\n\nconst copy = (text: string, options: Options = {}) => {\n  const {onCopy, format} = options\n\n  let success = false\n\n  const reselectPrevious = deselectCurrent()\n\n  const range = document.createRange()\n  const selection = document.getSelection()\n\n  const mark = document.createElement('span')\n  mark.textContent = text\n\n  updateMarkStyles(mark)\n\n  mark.addEventListener('copy', (e) => {\n    e.stopPropagation();\n    if (format) {\n      e.preventDefault()\n      if (!e.clipboardData) {\n        // 只有 IE 11 里 e.clipboardData 一直为 undefined\n        // 这里 format 要转为 IE 11 里指定的 format\n        const IE11Format = clipboardToIE11Formatting[format || 'default']\n        // @ts-ignore clearData 只有 IE 上有\n        window.clipboardData.clearData()\n        // @ts-ignore setData 只有 IE 上有\n        window.clipboardData.setData(IE11Format, text);\n      } else {\n        e.clipboardData.clearData()\n        e.clipboardData.setData(format, text)\n      }\n    }\n\n    if (onCopy) {\n      e.preventDefault()\n      onCopy(e.clipboardData)\n    }\n  })\n\n  // 插入 body 中\n  document.body.appendChild(mark)\n\n  // 选中\n  range.selectNodeContents(mark)\n  selection.addRange(range)\n\n  try {\n    // execCommand 有些浏览器可能不支持，这里要 try 一下\n    success = document.execCommand('copy')\n\n    if (!success) {\n      throw new Error(\"Can't not copy\")\n    }\n    // 复制成功\n    success = true\n  } catch (e) {\n    try {\n      // @ts-ignore window.clipboardData 这鬼玩意只有 IE 上有\n      window.clipboardData.setData(format || 'text', text)\n      // @ts-ignore window.clipboardData 这鬼玩意只有 IE 上有\n      onCopy && onCopy(window.clipboardData)\n      // 复制成功\n      success = true\n    } catch (e) {\n      // 最后兜底方案，让用户在 window.prompt 的时候输入\n      window.prompt('请手动复制以下内容', text)\n    }\n  } finally {\n    if (selection) {\n      if (selection.removeRange) {\n        selection.removeRange(range)\n      } else {\n        selection.removeAllRanges()\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark)\n    }\n    reselectPrevious()\n  }\n\n  return success\n}\n\nexport default copy\n","import copy from './lib/index'\n\nconst $copy = document.querySelector<HTMLButtonElement>('#copy')\nconst $myCopy = document.querySelector<HTMLButtonElement>('#my-copy')\n\n$copy.onclick = () => {\n  const copyText = document.querySelector<HTMLParagraphElement>('#text').innerText\n\n  copy(copyText)\n}\n\n$myCopy.onclick = () => {\n  const myText = document.querySelector<HTMLParagraphElement>('#my-text').innerText\n\n  copy('xxx', {\n    onCopy: (data) => data.setData('text/plain', myText),\n  })\n}\n"],"sourceRoot":""}